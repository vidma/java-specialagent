<!--
  Copyright 2018 The OpenTracing Authors

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
-->
<project
  xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>io.opentracing.contrib.specialagent</groupId>
    <artifactId>specialagent</artifactId>
    <version>1.7.4-SNAPSHOT</version>
  </parent>
  <artifactId>opentracing-specialagent</artifactId>
  <name>OpenTracing SpecialAgent</name>
  <url>https://github.com/opentracing-contrib/java-specialagent/tree/master/opentracing-specialagent</url>
  <profiles>
    <profile>
      <id>assemble</id>
      <activation>
        <property>
          <name>assemble</name>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>io.opentracing.contrib.specialagent</groupId>
            <artifactId>specialagent-maven-plugin</artifactId>
            <version>${project.version}</version>
            <executions>
              <execution>
                <id>assemble</id>
                <!-- Phase must be generate-resources for the maven-resources-plugin to acknowledge the
                  <outputDirectory> of this execution, which is defined as a <resource> above. Specifying a
                  different phase results in a JAR that does not include the dependencies generated in the
                  <outputDirectory>. -->
                <phase>generate-resources</phase>
                <goals>
                  <goal>assemble</goal>
                </goals>
              </execution>
              <execution>
                <id>verify</id>
                <goals>
                  <goal>verify</goal>
                </goals>
                <phase>prepare-package</phase>
              </execution>
            </executions>
          </plugin>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-surefire-plugin</artifactId>
            <configuration>
              <skip>true</skip>
            </configuration>
          </plugin>
        </plugins>
      </build>
      <dependencies>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>thread</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>orientdb-3</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <!--
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-boot</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-webmvc</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>okhttp</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        -->
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>jdbc</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <!--
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>concurrent</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        -->
        <!--
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>httpurlconnection</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>servlet</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>mongo-driver</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>camel</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>aws-sdk-1</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>aws-sdk-2</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>cassandra-driver-3</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>dubbo-2.6</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>dubbo-2.7</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>cassandra-driver-4</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>jms</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>elasticsearch-client-rest</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>elasticsearch-client-transport</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>rxjava-2</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>rxjava-3</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>kafka-client</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>kafka-streams</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>asynchttpclient</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>rabbitmq-client</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-rabbitmq</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>thrift</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>grpc</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>jedis</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>apache-httpclient</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>lettuce</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-webflux</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>redisson</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>grizzly-http-client</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>grizzly-http-server</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>reactor</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>hazelcast</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spymemcached</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>feign</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>zuul</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-kafka</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-scheduling</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-websocket</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-jms</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>spring-messaging</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>jaxrs</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        -->
        <!-- FIXME!
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>akka-actor</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
-->
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>akka-http</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>play</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>play-ws</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <!--
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>couchbase-client</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>google-http-client</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>neo4j-driver</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>netty</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>pulsar-client</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>pulsar-functions</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>dynamic</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>mule-4-http-service</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>mule-4-module-artifact</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>mule-4-core</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        <dependency>
          <groupId>io.opentracing.contrib.specialagent.rule</groupId>
          <artifactId>cxf</artifactId>
          <version>${project.version}</version>
          <optional>true</optional>
          <scope>provided</scope>
        </dependency>
        -->
      </dependencies>
    </profile>
    <profile>
      <id>tools.jar</id>
      <activation>
        <jdk>(,1.9)</jdk>
      </activation>
      <dependencies>
        <dependency>
          <groupId>com.sun</groupId>
          <artifactId>tools</artifactId>
          <version>1.6.0</version>
          <scope>system</scope>
          <systemPath>${java.home}/../lib/tools.jar</systemPath>
        </dependency>
      </dependencies>
    </profile>
  </profiles>
  <dependencies>
    <!-- Maven dependencies necessary for execution of mvn from `AgentRunner` -->
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-embedder</artifactId>
      <optional>true</optional>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-compat</artifactId>
      <optional>true</optional>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>io.opentracing.contrib.specialagent</groupId>
      <artifactId>opentracing-rewrite</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>io.opentracing.contrib.specialagent</groupId>
      <artifactId>specialagent-fingerprint</artifactId>
      <version>${project.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <scope>provided</scope>
    </dependency>

    <!-- Use <optional>true</optional> instead of <scope>provided</scope>
      for OT libs so they make it into both the main and test JARs. -->

    <dependency>
      <groupId>io.opentracing.contrib.specialagent</groupId>
      <artifactId>opentracing-specialagent-api</artifactId>
    </dependency>
    <dependency>
      <groupId>io.opentracing.contrib.specialagent</groupId>
      <artifactId>opentracing-adapter</artifactId>
    </dependency>
  </dependencies>
  <build>
    <resources>
      <!-- Includes the output of the maven-dependency-plugin (ids: copy-dependencies and
        unpack-dependencies) -->
      <resource>
        <directory>${project.build.directory}/dependencies</directory>
      </resource>
      <resource>
        <directory>src/main/resources</directory>
      </resource>
    </resources>
    <testResources>
      <!-- Includes the output of the maven-dependency-plugin (id: unpack-test-dependencies) -->
      <testResource>
        <directory>${project.build.directory}/test-dependencies</directory>
      </testResource>
      <testResource>
        <!-- Include the main build output path to include the main classes and
          resources of this module -->
        <directory>${project.build.directory}/classes</directory>
        <!-- Have to exclude all JARs, because all dependencies are copied to the
          ${project.build.directory}/dependencies/META-INF/plugins
          path via maven-dependency-plugin (id: copy-dependencies), and the
          ${project.build.directory}/dependencies path is listed as a <resource> right
          above here, which makes the maven-resources-plugin copy them to
          ${project.build.directory}/classes. -->
        <excludes>
          <exclude>**/*.jar</exclude>
          <exclude>**/*.jar</exclude>
        </excludes>
      </testResource>
      <testResource>
        <directory>src/test/resources</directory>
      </testResource>
    </testResources>
    <plugins>
      <!-- maven-shade-plugin cannot be used to build a JAR that requires test dependencies -->
      <!--plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-shade-plugin</artifactId>
        <version>3.1.0</version>
        <executions>
          <execution>
            <phase>package</phase>
            <goals>
              <goal>shade</goal>
            </goals>
          </execution>
        </executions>
        <configuration>
          <finalName>${project.artifactId}</finalName>
          <transformers>
            <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
              <manifestEntries>
                <Main-Class>io.opentracing.contrib.specialagent.SpecialAgent</Main-Class>
                <Agent-Class>io.opentracing.contrib.specialagent.SpecialAgent</Agent-Class>
                <Premain-Class>io.opentracing.contrib.specialagent.SpecialAgent</Premain-Class>
                <Can-Redefine-Classes>true</Can-Redefine-Classes>
                <Can-Retransform-Classes>true</Can-Retransform-Classes>
              </manifestEntries>
            </transformer>
          </transformers>
        </configuration>
      </plugin-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-dependency-plugin</artifactId>
        <executions>
          <execution>
            <id>unpack-dependencies</id>
            <!-- Phase must be generate-resources for the maven-resources-plugin to acknowledge the
              <outputDirectory> of this execution, which is defined as a <resource> above. Specifying a
              different phase results in a JAR that does not include the dependencies generated in the
              <outputDirectory>. -->
            <phase>generate-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/dependencies</outputDirectory>
              <includeScope>runtime</includeScope>
              <excludes>META-INF/</excludes>
            </configuration>
          </execution>
          <execution>
            <id>unpack-test-dependencies</id>
            <!-- Phase must be generate-test-resources for the maven-resources-plugin to acknowledge the
              <outputDirectory> of this execution, which is defined as a <testResource> above. Specifying a
              different phase results in a JAR that does not include the dependencies generated in the
              <outputDirectory>. -->
            <phase>generate-test-resources</phase>
            <goals>
              <goal>unpack-dependencies</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.build.directory}/test-dependencies</outputDirectory>
              <!--includeScope>test</includeScope--> <!-- No idea why this needs to be commented out for this to work?! -->
              <excludeScope>provided</excludeScope>
              <excludeGroupIds>junit</excludeGroupIds>
              <excludes>META-INF/</excludes>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <configuration>
          <archive>
            <manifestEntries>
              <Main-Class>io.opentracing.contrib.specialagent.SpecialAgent</Main-Class>
              <Agent-Class>io.opentracing.contrib.specialagent.SpecialAgent</Agent-Class>
              <Premain-Class>io.opentracing.contrib.specialagent.SpecialAgent</Premain-Class>
              <Boot-Class-Path>${project.artifactId}-${project.version}.jar</Boot-Class-Path>
              <Can-Redefine-Classes>true</Can-Redefine-Classes>
              <Can-Retransform-Classes>true</Can-Retransform-Classes>
            </manifestEntries>
          </archive>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
            <configuration>
              <archive>
                <manifestEntries>
                  <Boot-Class-Path>${project.artifactId}-${project.version}-tests.jar</Boot-Class-Path>
                </manifestEntries>
              </archive>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <!-- maven-assembly-plugin cannot be used because its <scope>test</scope> spec does
        not exclude other scopes. It basically means: <scope>test (and runtime)</scope> -->
      <!--plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-assembly-plugin</artifactId>
        <version>3.1.0</version>
        <configuration>
          <finalName>${project.artifactId}-${project.version}</finalName>
          <attach>false</attach>
          <archive>
            <manifestEntries>
              <Main-Class>io.opentracing.contrib.specialagent.SpecialAgent</Main-Class>
              <Agent-Class>io.opentracing.contrib.specialagent.SpecialAgent</Agent-Class>
              <Premain-Class>io.opentracing.contrib.specialagent.SpecialAgent</Premain-Class>
              <Can-Redefine-Classes>true</Can-Redefine-Classes>
              <Can-Retransform-Classes>true</Can-Retransform-Classes>
            </manifestEntries>
          </archive>
          <descriptors>
            <descriptor>test-assembly.xml</descriptor>
          </descriptors>
        </configuration>
        <executions>
          <execution>
            <goals>
              <goal>single</goal>
            </goals>
            <phase>package</phase>
          </execution>
        </executions>
      </plugin>
      <!- Used to move the main assembly to be the main jar of this module. This is due to a bug in
        maven-assembly-plugin where if even if one <appendAssemblyId> of a assembly execution is false,
        the assembly content of one assembly ends up inside the other also. ->
      <plugin>
        <groupId>com.coderplus.maven.plugins</groupId>
        <artifactId>copy-rename-maven-plugin</artifactId>
        <version>1.0.1</version>
        <executions>
          <execution>
            <goals>
              <goal>rename</goal>
            </goals>
            <phase>verify</phase>
            <configuration>
              <sourceFile>${project.build.directory}/${project.artifactId}-${project.version}-assembly.jar</sourceFile>
              <destinationFile>${project.build.directory}/${project.artifactId}-${project.version}.jar</destinationFile>
            </configuration>
          </execution>
        </executions>
      </plugin-->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <trimStackTrace>false</trimStackTrace>
          <reuseForks>false</reuseForks>
          <!-- Have to explicitly define the path of the tests, because when the maven-dependency-plugin
            unpacks JUnit dependencies in the generate-test-resources phase, they end up being picked up
            by maven-surefire-plugin in the test phase. -->
          <includes>
            <include>io/opentracing/contrib/specialagent/**/*Test</include>
            <include>io/opentracing/contrib/specialagent/**/*TestCase</include>
          </includes>
          <excludes>
            <exclude>io/opentracing/contrib/specialagent/**/*ITest</exclude>
            <exclude>io/opentracing/contrib/specialagent/**/*ITestCase</exclude>
            <exclude>io/opentracing/contrib/specialagent/**/*IntegrationTest</exclude>
            <exclude>io/opentracing/contrib/specialagent/**/*IntegrationTestCase</exclude>
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-failsafe-plugin</artifactId>
        <executions>
          <execution>
            <id>integration-test</id>
            <goals>
              <goal>integration-test</goal>
              <goal>verify</goal>
            </goals>
            <configuration>
              <trimStackTrace>false</trimStackTrace>
              <reuseForks>false</reuseForks>
              <includes>
                <include>io/opentracing/contrib/specialagent/**/*ITest</include>
                <include>io/opentracing/contrib/specialagent/**/*ITestCase</include>
                <include>io/opentracing/contrib/specialagent/**/*IntegrationTest</include>
                <include>io/opentracing/contrib/specialagent/**/*IntegrationTestCase</include>
              </includes>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <excludes>
            <exclude></exclude> <!-- This is necessary for inner classes to be run -->
          </excludes>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>install</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <skip>true</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
      <plugin>
        <groupId>org.eluder.coveralls</groupId>
        <artifactId>coveralls-maven-plugin</artifactId>
        <executions>
          <execution>
            <phase>install</phase>
            <goals>
              <goal>report</goal>
            </goals>
            <configuration>
              <skip>true</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>
</project>